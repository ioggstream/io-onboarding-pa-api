openapi: "3.0.0"
info:
  title: "IO onboarding PA API"
  description: "The backend used by the onboarding portal for public administrations of the IO project."
  version: "0.0.1"
  x-project: io
servers:
  - url: https://api.pa-onboarding.dev.io.italia.it/
    description: Development environment
  - url: https://api.pa-onboarding.io.italia.it/
    description: Production environment
paths:
  /login:
    get:
      parameters:
        - name: entityID
          in: query
          required: true
          description: "**IdP Provider ID**. *Example: `posteid`*. The id of the SPID IdP to perform the login through. *Note: Also a fake IdP provider is available, whose id is `xx_testenv2`*."
          schema:
            type: string
            enum: ["lepidaid", "infocertid", "sielteid", "namirialid", "timid", "arubaid", "posteid", "intesaid", "spiditalia", "xx_testenv2"]
        - name: authLevel
          in: query
          required: true
          description: "**SPID level**. *Example: `SpidL2`*. The security level of SPID authentication."
          schema:
            type: string
            enum: ["SpidL1", "SpidL2", "SpidL3"]
      responses:
        302:
          description: Redirection to the login page from the choosen IdP.
  /logout:
    post:
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful response
        401:
          description: Unouthorized response
        500:
          description: Error response
  /api/v1/profile:
    get:
      security:
        - bearerAuth: []
      responses:
        200:
          description: The user profile information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        400:
          description: Bad request
        401:
          description: Unauthorized request
        500:
          description: Internal error
    post:
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workEmail:
                  $ref: "#/components/schemas/EmailAddress"
              required:
                - workEmail
      responses:
        200:
          description: The updated user profile information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        400:
          description: Bad request
        401:
          description: Unauthorized request
        500:
          description: Internal error
  /public-administrations:
    get:
      parameters:
        - name: search
          in: query
          required: true
          description: "**Public administration name**. The API responds with a list of results that match the searching words."
          schema:
            type: string
            example: comune gioiosa
      responses:
        200:
          description: The public administrations whose names match the searching words
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchedOrganization'
components:
  schemas:
    EmailAddress:
      type: string
      format: email
    FiscalCode:
      type: string
      description: User's fiscal code.
      format: FiscalCode
      x-import: italia-ts-commons/lib/strings
      example: SPNDNL80R13C555X
    UserRole:
      type: string
      enum:
        - "ORG_DELEGATE"
        - "ORG_MANAGER"
        - "DEVELOPER"
        - "ADMIN"
    UserProfile:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
        familyName:
          type: string
        firstName:
          type: string
        fiscalCode:
          allOf:
            - $ref: "#/components/schemas/FiscalCode"
            - nullable: true
        role:
          $ref: "#/components/schemas/UserRole"
        workEmail:
          allOf:
            - $ref: "#/components/schemas/EmailAddress"
            - nullable: true
      required:
        - email
        - familyName
        - firstName
        - fiscalCode
        - role
        - workEmail
      example:
        {
          email: "example@email.com",
          familyName: "Rossi",
          firstName: "Mario",
          fiscalCode: "RSSMRA80A01H501U",
          role: "ORG_DELEGATE",
          workEmail: "work-email@email.com"
        }
    SearchedOrganization:
      type: object
      properties:
        fiscalCode:
          type: string
        ipaCode:
          type: string
        name:
          type: string
        legalRepresentative:
          type: object
          properties:
            familyName:
              type: string
            firstName:
              type: string
            fiscalCode:
              nullable: true
              default: null
            phoneNumber:
              nullable: true
              default: null
          required:
            - familyName
            - firstName
            - fiscalCode
            - phoneNumber
        link:
          type: string
        pecs:
          type: array
          items:
            type: string
          minLength: 1
          maxLength: 5
        scope:
          type: string
          enum: ["LOCAL", "NATIONAL"]
          nullable: true
        selectedPecIndex:
          type: integer
          minimum: -1
          maximum: 4
          nullable: true
      required:
        - fiscalCode
        - ipaCode
        - name
        - legalRepresentative
        - link
        - pecs
        - scope
        - selectedPecIndex
      example:
        [
        {
          "fiscalCode": "86000470830",
          "ipaCode": "c_e043",
          "legalRepresentative": {
            "familyName": "Spano'",
            "firstName": "Ignazio Alfonso",
            "fiscalCode": null,
            "phoneNumber": null
          },
          "name": "Comune di Gioiosa Marea",
          "pecs": [
            "indirizzo00@email.pec.it",
            "indirizzo01@email.pec.it"
          ],
          "scope": null,
          "selectedPecIndex": null,
          "link": "/public-administrations/c_e043"
        },
        {
          "fiscalCode": "81000930800",
          "ipaCode": "c_e044",
          "legalRepresentative": {
            "familyName": "ALI'",
            "firstName": "Gianfranco",
            "fiscalCode": null,
            "phoneNumber": null
          },
          "name": "Comune di Gioiosa Jonica",
          "pecs": [
            "indirizzo10@email.pec.it",
            "indirizzo11@email.pec.it",
            "indirizzo12@email.pec.it",
            "indirizzo13@email.pec.it",
          ],
          "scope": null,
          "selectedPecIndex": null,
          "link": "/public-administrations/c_e044"
        },
        {
          "fiscalCode": "00282520808",
          "ipaCode": "c_e956",
          "legalRepresentative": {
            "familyName": "Sergio",
            "firstName": "Mazzia",
            "fiscalCode": null,
            "phoneNumber": null
          },
          "name": "Comune di Marina di Gioiosa Ionica",
          "pecs": [
            "indirizzo20@email.pec.it",
            "indirizzo21@email.pec.it",
          ],
          "scope": null,
          "selectedPecIndex": null,
          "link": "/public-administrations/c_e956"
        }
        ]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
